BEGIN;
SELECT plan(90);
--SELECT * FROM no_plan();

-- Check that we have the functions we think we have.
SELECT has_function(f)
  FROM unnest(ARRAY[
      'is_admin_or_owns', 'grant_coownership', 'revoke_coownership', 'transfer_ownership'
  ]) AS f;

SELECT has_function('is_admin_or_owns',   ARRAY['label', 'term[]']);
SELECT has_function('grant_coownership',  ARRAY['label', 'label', 'term[]']);
SELECT has_function('revoke_coownership', ARRAY['label', 'label', 'term[]']);
SELECT has_function('transfer_ownership', ARRAY['label', 'label', 'term[]']);

-- User "pgxn" should not have access to is_admin_or_owns.
SELECT ok(
    NOT has_function_privilege('pgxn', 'is_admin_or_owns(label, term[])', 'EXECUTE'),
    'User "pgxn" should not have EXECUTE priv on is_admin_or_owns()'
);

SELECT ok(
    has_function_privilege('pgxn', f, 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on ' || f
) FROM unnest(ARRAY[
    'grant_coownership(label, label, term[])',
    'revoke_coownership(label, label, term[])',
    'transfer_ownership(label, label, term[])'
]) AS f;

/****************************************************************************/
-- Test is_admin_or_owns().
SELECT function_returns('is_admin_or_owns', 'boolean' );
SELECT function_lang_is('is_admin_or_owns', 'plpgsql' );
SELECT volatility_is(   'is_admin_or_owns', 'stable' );

SELECT ok(
    NOT is_admin_or_owns('nobody', '{}'),
    'Should get false from is_admin_or_owns() for nonexistent user'
);

SELECT ok(
    NOT is_admin_or_owns('nobody', '{foo}'),
    'Should get false from is_admin_or_owns() for non-existent user and extension'
);

-- We need a user.
SELECT ok(
    insert_user('theory', 'wet blanket', email := 'theory@pgxn.org'),
    'Insert user "theory"'
);

SELECT ok(
    NOT is_admin_or_owns('theory', '{}'),
    'Should get false from is_admin_or_owns() for user and no extensions'
);

SELECT ok(
    NOT is_admin_or_owns('theory', '{foo}'),
    'Should get false from is_admin_or_owns() for user and non-existent extension'
);

-- Create an extension for this user.
INSERT INTO extensions (owner, name) VALUES ('theory', 'foo');

SELECT ok(
    is_admin_or_owns('theory', '{foo}'),
    'Should get true from is_admin_or_owns() for user and extension'
);

SELECT ok(
    NOT is_admin_or_owns('theory', '{foo, bar}'),
    'Should get false from is_admin_or_owns() for user one owned and one unowned extension'
);

-- Give the user that extension, too.
INSERT INTO extensions (owner, name) VALUES ('theory', 'bar');
SELECT ok(
    is_admin_or_owns('theory', '{foo, bar}'),
    'Should get true from is_admin_or_owns() for user with two owned extensions'
);


SELECT ok(
    insert_user('strongrrl', 'wet blanket', email := 'strongrrl@pgxn.org'),
    'Insert user "strongrrl"'
);

SELECT ok(
    NOT is_admin_or_owns('strongrrl', '{foo}'::term[]),
    'Should get false from is_admin_or_owns() for strongrrl and a theory extension'
);

-- Make strongrrl an admin.
UPDATE users SET is_admin = TRUE where nickname = 'strongrrl';
SELECT ok(
    is_admin_or_owns('strongrrl', '{foo}'),
    'Should get true from is_admin_or_owns() for admin user'
);

SELECT ok(
    is_admin_or_owns('strongrrl', '{whatevs}'),
    'Should get true from is_admin_or_owns() for admin user an non-existent extension'
);

SELECT ok(
    is_admin_or_owns('strongrrl', '{}'),
    'Should get true from is_admin_or_owns() for admin user an no extension'
);
UPDATE users SET is_admin = FALSE where nickname = 'strongrrl';

/****************************************************************************/
-- Test grant_coownership().
SELECT function_returns('grant_coownership', 'boolean' );
SELECT function_lang_is('grant_coownership', 'plpgsql' );
SELECT volatility_is(   'grant_coownership', 'volatile' );

SELECT throws_ok(
    $$ SELECT grant_coownership('nobody', 'nobody', '{}'::term[]) $$,
    'P0001',
    'User “nobody” does not have permission to grant co-ownership to “”',
    'Should get error from grant_coownership() for non-existent owner'
);

SELECT throws_ok(
    $$ SELECT grant_coownership('nobody', 'nobody', ARRAY['nothing'::term]) $$,
    'P0001',
    'User “nobody” does not have permission to grant co-ownership to “nothing”',
    'Should get error from grant_coownership() for non-existent owner and extension'
);

SELECT throws_ok(
    $$ SELECT grant_coownership('nobody', 'nobody', ARRAY['nothing'::term, 'nohow']) $$,
    'P0001',
    'User “nobody” does not have permission to grant co-ownership to “nothing”, “nohow”',
    'Should get error from grant_coownership() for non-existent owner and extensions'
);

SELECT throws_ok(
    $$ SELECT grant_coownership('theory', 'nobody', ARRAY['nothing'::term, 'nohow']) $$,
    'P0001',
    'User “theory” does not have permission to grant co-ownership to “nothing”, “nohow”',
    'Should get error from grant_coownership() for non-existent extensions'
);

SELECT throws_ok(
    $$ SELECT grant_coownership('strongrrl', 'nobody', ARRAY['foo'::term]) $$,
    'P0001',
    'User “strongrrl” does not have permission to grant co-ownership to “foo”',
    'Should get error from grant_coownership() for non-owner'
);

SELECT is(COUNT(0)::int, 0, 'Should start with no co-owners') FROM coowners;

-- Let theory give co-ownerhip of foo to strongrrl.
SELECT ok(
    grant_coownership('theory', 'strongrrl', ARRAY['bar'::term]),
    'Let theory give co-ownership of "bar" to strongrrl'
);

SELECT is(COUNT(0)::int, 1, 'Should now have one co-owner') FROM coowners;
SELECT row_eq(
    $$ SELECT * FROM coowners $$,
    ROW('bar', 'strongrrl', NOW())::coowners,
    'It should be the right row'
);

SELECT ok(
    grant_coownership('theory', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Let theory give co-ownership of "bar" and "foo" to strongrrl'
);

SELECT is(COUNT(0)::int, 2, 'Should now have two co-owners') FROM coowners;
SELECT bag_eq(
    $$ SELECT * FROM coowners $$,
    $$ VALUES
        ('bar', 'strongrrl', NOW()),
        ('foo', 'strongrrl', NOW())
    $$,
    'They should be the right rows'
);

-- Do it again.
SELECT ok(
    NOT grant_coownership('theory', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Should get false from grant_coownership() if user is already coowner'
);
SELECT is(COUNT(0)::int, 2, 'Should still have two co-owners') FROM coowners;

-- Grant to self.
SELECT ok(
    NOT grant_coownership('theory', 'theory', ARRAY['foo'::term, 'bar']),
    'Should get false from grant_coownership() if user is already owner'
);
SELECT is(COUNT(0)::int, 2, 'Should still have two co-owners') FROM coowners;

-- Create another user.
SELECT ok(
    insert_user('anna', 'wet blanket', email := 'anna@pgxn.org'),
    'Insert user "anna"'
);

-- Have strongrrl try to grant co-ownership.
SELECT throws_ok(
    $$ SELECT grant_coownership('strongrrl', 'anna', ARRAY['foo'::term]) $$,
    'P0001',
    'User “strongrrl” does not have permission to grant co-ownership to “foo”',
    'Should get error from grant_coownership() for co-owner but not-owner'
);

-- Make strongrrl an admin and try again.
UPDATE users SET is_admin = TRUE where nickname = 'strongrrl';

SELECT ok(
    grant_coownership('strongrrl', 'anna', ARRAY['foo'::term]),
    'Add co-owner as admin'
);

SELECT is(COUNT(0)::int, 3, 'Should now have three co-owners') FROM coowners;
SELECT bag_eq(
    $$ SELECT * FROM coowners $$,
    $$ VALUES
        ('bar', 'strongrrl', NOW()),
        ('foo', 'strongrrl', NOW()),
        ('foo', 'anna', NOW())
    $$,
    'They should be the right rows'
);

SELECT ok(
    NOT grant_coownership('strongrrl', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Should get false from grant_coownership() when admin tries to add existing co-owner'
);

-- Remove strongrrl's co-ownership and try again.
DELETE FROM coowners WHERE nickname = 'strongrrl';
SELECT ok(
    grant_coownership('strongrrl', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Admmin should be able to add self as co-owner'
);

SELECT is(COUNT(0)::int, 3, 'Should have three co-owners again') FROM coowners;
SELECT bag_eq(
    $$ SELECT * FROM coowners $$,
    $$ VALUES
        ('foo', 'strongrrl', NOW()),
        ('bar', 'strongrrl', NOW()),
        ('foo', 'anna', NOW())
    $$,
    'They should be the right rows'
);
UPDATE users SET is_admin = FALSE where nickname = 'strongrrl';

/****************************************************************************/
-- Test revoke_coownership().
SELECT function_returns('revoke_coownership', 'boolean' );
SELECT function_lang_is('revoke_coownership', 'plpgsql' );
SELECT volatility_is(   'revoke_coownership', 'volatile' );

SELECT throws_ok(
    $$ SELECT revoke_coownership('nobody', 'anna', '{}') $$,
    'P0001',
    'User “nobody” does not have permission to revoke co-ownership from “”',
    'Should get error from revoke_coownership() for non-existent owner'
);

SELECT throws_ok(
    $$ SELECT revoke_coownership('nobody', 'anna', '{whatevs}') $$,
    'P0001',
    'User “nobody” does not have permission to revoke co-ownership from “whatevs”',
    'Should get error from revoke_coownership() for non-existent owner and extension'
);

SELECT throws_ok(
    $$ SELECT revoke_coownership('nobody', 'anna', '{whatevs,yo}') $$,
    'P0001',
    'User “nobody” does not have permission to revoke co-ownership from “whatevs”, “yo”',
    'Should get error from revoke_coownership() for non-existent owner and extensions'
);

SELECT throws_ok(
    $$ SELECT revoke_coownership('anna', 'strongrrl', '{yo}') $$,
    'P0001',
    'User “anna” does not have permission to revoke co-ownership from “yo”',
    'Should get error from revoke_coownership() for non-admin and non-owner'
);

SELECT throws_ok(
    $$ SELECT revoke_coownership('strongrrl', 'anna', '{foo}') $$,
    'P0001',
    'User “strongrrl” does not have permission to revoke co-ownership from “foo”',
    'Should get error from revoke_coownership() for non-owner'
);

SELECT ok(
    NOT revoke_coownership('anna', 'anna', '{bar}'),
    'Co-owner cannot remove self from extensions self does not own'
);

SELECT is(COUNT(0)::int, 3, 'Should still have three co-owners') FROM coowners;
SELECT bag_eq(
    $$ SELECT * FROM coowners $$,
    $$ VALUES
        ('foo', 'strongrrl', NOW()),
        ('bar', 'strongrrl', NOW()),
        ('foo', 'anna', NOW())
    $$,
    'They should be the right rows'
);

SELECT ok(
    revoke_coownership('anna', 'anna', '{foo}'),
    'Let co-owner remove self'
);

SELECT is(COUNT(0)::int, 2, 'Should now have two co-owners') FROM coowners;
SELECT bag_eq(
    $$ SELECT * FROM coowners $$,
    $$ VALUES
        ('foo', 'strongrrl', NOW()),
        ('bar', 'strongrrl', NOW())
    $$,
    'They should be the right rows'
);

-- Let the owner remove co-ownership.
SELECT ok(
    revoke_coownership('theory', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Let owner remove co-ownership'
);
SELECT is(COUNT(0)::int, 0, 'Should now have no co-owners') FROM coowners;

-- Create a few co-ownersips again.
INSERT INTO coowners (extension, nickname)
VALUES ('foo', 'anna'), ('bar', 'anna');

-- Let admin user revoke co-ownership.
UPDATE users SET is_admin = TRUE where nickname = 'strongrrl';
SELECT ok(
    revoke_coownership('strongrrl', 'anna', ARRAY['foo'::term, 'bar']),
    'Let admin remove co-ownership'
);
SELECT is(COUNT(0)::int, 0, 'Should again have no co-owners') FROM coowners;
UPDATE users SET is_admin = FALSE where nickname = 'strongrrl';

/****************************************************************************/
-- Test transfer_coownership().
SELECT function_returns('transfer_ownership', 'boolean' );
SELECT function_lang_is('transfer_ownership', 'plpgsql' );
SELECT volatility_is(   'transfer_ownership', 'volatile' );

SELECT throws_ok(
    $$ SELECT transfer_ownership('nobody', 'nobody', '{}'::term[]) $$,
    'P0001',
    'User “nobody” does not have permission to transfer ownership of “”',
    'Should get error from transfer_ownership() for non-existent owner'
);

SELECT throws_ok(
    $$ SELECT transfer_ownership('nobody', 'nobody', '{foo}'::term[]) $$,
    'P0001',
    'User “nobody” does not have permission to transfer ownership of “foo”',
    'Should get error from transfer_ownership() for non-existent owner and extension'
);

SELECT throws_ok(
    $$ SELECT transfer_ownership('nobody', 'nobody', '{foo,bar}'::term[]) $$,
    'P0001',
    'User “nobody” does not have permission to transfer ownership of “foo”, “bar”',
    'Should get error from transfer_ownership() for non-existent owner and extensions'
);

SELECT throws_ok(
    $$ SELECT transfer_ownership('strongrrl', 'nobody', '{foo}'::term[]) $$,
    'P0001',
    'User “strongrrl” does not have permission to transfer ownership of “foo”',
    'Should get error from transfer_ownership() for non-owner'
);

INSERT INTO coowners (extension, nickname)
VALUES ('foo', 'strongrrl'), ('bar', 'strongrrl');

-- Theory should currently own foo and bar.
SELECT is(
    ARRAY(SELECT owner::text FROM extensions WHERE name in ('foo', 'bar')),
    ARRAY['theory', 'theory'],
    'User "theory" should currently own "foo" and "bar"'
);

-- Set updated_at in the past.
UPDATE extensions SET updated_at = NOW() - '1 day'::interval;

-- Have theory transfer them to strongrrl.
SELECT ok(
    transfer_ownership('theory', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Transfer two extensions to strongrrl'
);

SELECT is(
    ARRAY(SELECT owner::text FROM extensions WHERE name in ('foo', 'bar')),
    ARRAY['strongrrl', 'strongrrl'],
    'Now "strongrrl" should own "foo" and "bar"'
);

SELECT is(
    ARRAY(SELECT updated_at FROM extensions WHERE name in ('foo', 'bar')),
    ARRAY[NOW(), NOW()],
    'And updated_at should have been updated'
);

SELECT is(COUNT(0)::int, 0, 'And her co-ownerships should have been deleted') FROM coowners;

-- Try transfering to strongrrl again.
SELECT throws_ok(
    $$ SELECT transfer_ownership('theory', 'strongrrl', '{foo,bar}'::term[]) $$,
    'P0001',
    'User “theory” does not have permission to transfer ownership of “foo”, “bar”',
    'Should get error from transfer_ownership() for old owner'
);

-- Have strongrrl try to transfer to herself.
UPDATE extensions SET updated_at = NOW() - '1 day'::interval;

SELECT ok(
    NOT transfer_ownership('strongrrl', 'strongrrl', ARRAY['foo'::term, 'bar']),
    'Transfer from strongrrl to strongrrl should return false'
);

SELECT is(
    ARRAY(SELECT owner::text FROM extensions WHERE name in ('foo'::term, 'bar')),
    ARRAY['strongrrl', 'strongrrl'],
    'Now "strongrrl" should still own "foo" and "bar"'
);

SELECT is(
    ARRAY(SELECT updated_at FROM extensions WHERE name in ('foo'::term, 'bar')),
    ARRAY[NOW() - '1 day'::INTERVAL, NOW() - '1 day'::interval],
    'And updated_at should not have been updated'
);

SELECT * FROM finish();
ROLLBACK;
