BEGIN;
SELECT plan(239);
--SELECT * FROM no_plan();

SELECT has_enum('status');
SELECT enum_has_labels('status', ARRAY['new', 'active', 'inactive', 'deleted']);

SELECT has_table('public', 'users', 'Should have table public.users');

SELECT columns_are('public', 'users', ARRAY[
    'nickname',
    'password',
    'full_name',
    'email',
    'uri',
    'twitter',
    'why',
    'status',
    'set_by',
    'is_admin',
    'created_at',
    'updated_at',
    'visited_at'
]);

SELECT has_table( 'users' );
SELECT has_pk(    'users' );
SELECT has_fk(    'users' );

SELECT has_column(        'users', 'nickname' );
SELECT col_type_is(       'users', 'nickname', 'label' );
SELECT col_hasnt_default( 'users', 'nickname' );
SELECT col_is_pk(         'users', 'nickname' );

SELECT has_column(        'users', 'password' );
SELECT col_type_is(       'users', 'password', 'text' );
SELECT col_not_null(      'users', 'password' );
SELECT col_hasnt_default( 'users', 'password' );

SELECT has_column(        'users', 'full_name' );
SELECT col_type_is(       'users', 'full_name', 'text' );
SELECT col_not_null(      'users', 'full_name' );
SELECT col_hasnt_default( 'users', 'full_name' );

SELECT has_column(        'users', 'email' );
SELECT col_type_is(       'users', 'email', 'email' );
SELECT col_not_null(      'users', 'email' );
SELECT col_hasnt_default( 'users', 'email' );
SELECT col_is_unique(     'users', 'email' );

SELECT has_column(        'users', 'uri' );
SELECT col_type_is(       'users', 'uri', 'uri' );
SELECT col_is_null(       'users', 'uri' );
SELECT col_hasnt_default( 'users', 'uri' );

SELECT has_column(        'users', 'twitter' );
SELECT col_type_is(       'users', 'twitter', 'citext' );
SELECT col_not_null(      'users', 'twitter' );
SELECT col_has_default(   'users', 'twitter' );
SELECT col_default_is(    'users', 'twitter', '' );

SELECT has_column(        'users', 'why' );
SELECT col_type_is(       'users', 'why', 'text' );
SELECT col_not_null(      'users', 'why' );
SELECT col_has_default(   'users', 'why' );
SELECT col_default_is(    'users', 'why', '' );

SELECT has_column(        'users', 'status' );
SELECT col_type_is(       'users', 'status', 'status' );
SELECT col_not_null(      'users', 'status' );
SELECT col_has_default(   'users', 'status' );
SELECT col_default_is(    'users', 'status', 'new' );

SELECT has_column(        'users', 'set_by' );
SELECT col_type_is(       'users', 'set_by', 'label' );
SELECT col_not_null(      'users', 'set_by' );
SELECT col_hasnt_default( 'users', 'set_by' );
SELECT col_is_fk(         'users', 'set_by' );
SELECT fk_ok(             'users', 'set_by', 'users', 'nickname');

SELECT has_column(        'users', 'is_admin' );
SELECT col_type_is(       'users', 'is_admin', 'boolean' );
SELECT col_not_null(      'users', 'is_admin' );
SELECT col_has_default(   'users', 'is_admin' );
SELECT col_default_is(    'users', 'is_admin', 'false' );

SELECT has_column(        'users', 'created_at' );
SELECT col_type_is(       'users', 'created_at', 'timestamp with time zone' );
SELECT col_not_null(      'users', 'created_at' );
SELECT col_has_default(   'users', 'created_at' );
SELECT col_default_is(    'users', 'created_at', 'now()' );

SELECT has_column(        'users', 'updated_at' );
SELECT col_type_is(       'users', 'updated_at', 'timestamp with time zone' );
SELECT col_not_null(      'users', 'updated_at' );
SELECT col_has_default(   'users', 'updated_at' );
SELECT col_default_is(    'users', 'updated_at', 'now()' );

SELECT has_column(        'users', 'visited_at' );
SELECT col_type_is(       'users', 'visited_at', 'timestamp with time zone' );
SELECT col_not_null(      'users', 'visited_at' );
SELECT col_has_default(   'users', 'visited_at' );
SELECT col_default_is(    'users', 'visited_at', 'now()' );

-- Check triggers.
SELECT triggers_are( 'users', ARRAY['notify_new_user']);
SELECT trigger_is(   'users', 'notify_new_user', 'notify_new_user');
SELECT has_function('notify_new_user');
SELECT has_function('notify_new_user', '{}'::name[]);
SELECT volatility_is('notify_new_user', '{}'::name[], 'volatile');
SELECT function_returns('notify_new_user', '{}'::name[], 'trigger');

-- Check privileges.
SELECT ok(
    has_table_privilege('pgxn', 'users', 'SELECT'),
    'User "pgxn" should have SELECT priv on users table'
);

SELECT ok(
    NOT has_table_privilege('pgxn', 'users', priv),
    'User "pgxn" should not have ' || priv || ' priv on users table'
) FROM unnest(ARRAY[
    'UPDATE',
    'INSERT',
    'DELETE',
    'TRUNCATE',
    'REFERENCES',
    'TRIGGER'
]) AS priv;

/*****************************************************************************/
-- Test insert_user().
SELECT has_function(    'insert_user' );
SELECT has_function(    'insert_user', ARRAY['label', 'text', 'text', 'email', 'uri', 'citext', 'text'] );
SELECT is_definer(      'insert_user', ARRAY['label', 'text', 'text', 'email', 'uri', 'citext', 'text'] );
SELECT function_returns('insert_user', 'boolean' );
SELECT function_lang_is('insert_user', 'plpgsql' );
SELECT volatility_is(   'insert_user', 'volatile' );
SELECT ok(
    has_function_privilege(
        'pgxn',
        'insert_user(label, text, text, email, uri, citext, text)',
        'EXECUTE'
    ),
    'User "pgxn" should have EXECUTE priv on insert_user()'
);

SELECT is(COUNT(*)::int, 0, 'Should start with no users') FROM users;

SELECT ok(
    insert_user(
        nickname   := 'theory',
        password   := 'wet blanket',
        full_name  := 'David Wheeler',
        email      := 'theory@pgxn.org'
    ), 'Insert user "theory"'
);

SELECT is(COUNT(*)::int, 1, 'Should now have one user') FROM users;

SELECT row_eq(
    $$ SELECT nickname, NULL::text, full_name, email, uri, twitter, why, status, set_by,
              is_admin, created_at, updated_at, visited_at
         FROM users WHERE nickname = 'theory' $$,
    ROW('theory', NULL::text, 'David Wheeler', 'theory@pgxn.org',
        NULL::uri, '', '', 'new', 'theory', false, now(), now(), now())::users,
    'That user should have the expected data'
);

SELECT isnt( password, 'wet blanket', 'Password should not be clear text')
  FROM users WHERE nickname = 'theory';

SELECT isnt( password, 'theory', 'Password should not be nickname' )
  FROM users WHERE nickname = 'theory';

SELECT ok(
    insert_user(
        nickname  := 'strongrrl',
        password  := 'wet blanket',
        full_name := 'Julie Wheeler',
        email     := 'strongrrl@pgxn.org',
        uri       := 'http://www.strongrrl.com/',
        twitter   := '@strongrrl',
        why       := 'I rock!'
    ), 'Insert user "strongrrl"'
);

SELECT is(COUNT(*)::int, 2, 'Should now have two users') FROM users;

SELECT row_eq(
    $$ SELECT nickname, NULL::text, full_name, email, uri, twitter, why, status, set_by,
              is_admin, created_at, updated_at, visited_at
         FROM users WHERE nickname = 'strongrrl' $$,
    ROW('strongrrl', NULL::text, 'Julie Wheeler', 'strongrrl@pgxn.org',
        'http://www.strongrrl.com/', 'strongrrl', 'I rock!', 'new', 'strongrrl', false,
         now(), now(), now())::users,
    'User "strongrrl" should have the expected data'
);

SELECT isnt(
    (SELECT password FROM users WHERE nickname = 'strongrrl'),
    (SELECT password FROM users WHERE nickname = 'theory'),
    'Same password should not match'
);

SELECT unalike(
    password,
    '%' || nickname || '%',
    'Password should not contain nickname'
) FROM users;

SELECT unalike(
    password,
    '%wet blanket%',
    'Password should not contain clear text'
) FROM users;

SELECT is(
    password,
    crypt('wet blanket', password),
    'Passwords should be crypted'
 ) FROM users;

-- Try a too-short password.
SELECT throws_ok(
    $$ SELECT insert_user('foo', 'ascan', NULL) $$,
    'P0001',
    'Password must be at least eight characters long',
    'Should get exception for a too-short password'
);

/*****************************************************************************/
-- Mock NOW().
CREATE SCHEMA mock;

CREATE FUNCTION set_now(timestamptz) RETURNS SETOF boolean LANGUAGE plperl AS $$
    $_SHARED{now} = shift;
    return;
$$;

-- Won't be used by table defaults, which seem to be linked to
-- pg_catalog.now() at creation time.
CREATE FUNCTION mock.now() RETURNS timestamptz LANGUAGE plperl AS '$_SHARED{now}';

SELECT * FROM set_now('2010-08-19 11:01:03.306399+00');

DO LANGUAGE plpgsql $$
BEGIN
    EXECUTE 'SET search_path = mock,' || current_setting('search_path') || ',pg_catalog';
END;
$$;

/*****************************************************************************/
-- Test set_user_status().
SELECT throws_ok(
    $$ SELECT set_user_status('nobody', 'nobody', 'active') $$,
    'P0001',
    'Permission denied: User “nobody” is not an administrator',
    'Should get an exception for non-existent setter'
);

SELECT throws_ok(
    $$ SELECT set_user_status('theory', 'nobody', 'active') $$,
    'P0001',
    'Permission denied: User “theory” is not an administrator',
    'Should get an exception for non-admin setter'
);

UPDATE users SET is_admin = true WHERE nickname = 'theory';

SELECT ok(
    NOT set_user_status('theory', 'nobody', 'active'),
    'set_user_status() should return false for invalid user'
);

SELECT throws_ok(
    $$ SELECT set_user_status('theory', 'strongrrl', 'foo') $$,
    '22P02',
    NULL,
    'Should get error from set_user_status() for invalid status'
);

SELECT is( status, 'new', 'Status for ' || nickname || ' should be "new"' )
  FROM users;

SELECT is( set_by, nickname, 'Status for ' || nickname || ' should be set by self' )
  FROM users;

SELECT isnt(updated_at, '2010-08-19 11:01:03.306399+00', 'updated_at should be default')
  FROM users WHERE nickname = 'strongrrl';

-- Set a status.
SELECT ok(
    set_user_status('theory', 'strongrrl', 'active'),
    'Set strongrrl status to "active"'
);

SELECT is( status, 'active', 'Status for strongrrl should now be "active"' )
  FROM users WHERE nickname = 'strongrrl';

SELECT is( set_by, 'theory', 'Status for strongrrl should be set by theory' )
  FROM users WHERE nickname = 'strongrrl';

SELECT is(updated_at, '2010-08-19 11:01:03.306399+00', 'updated_at should be updated')
  FROM users WHERE nickname = 'strongrrl';

SELECT is( status, 'new', 'Status for theory should still be "new"' )
  FROM users WHERE nickname = 'theory';

SELECT is( set_by, nickname, 'Status for theory should still be set by self' )
  FROM users WHERE nickname = 'theory';

-- Try setting strongrrl to the same value.
SELECT ok(
    NOT set_user_status('theory', 'strongrrl', 'active'),
    'Setting strongrrl status to "active" again should fail'
);

-- User cannot change own status.
SELECT throws_ok(
    $$ SELECT set_user_status('theory', 'theory', 'active') $$,
    'P0001',
    'Permission denied: User cannot modify own status',
    'User should not be able to change own status'
);

SELECT is( status, 'new', 'Status for theory should still be "new"' )
  FROM users WHERE nickname = 'theory';

-- Go ahead and give strongrrl access.
UPDATE users SET is_admin = true WHERE nickname = 'strongrrl';

SELECT ok(
    set_user_status('strongrrl', 'theory', 'active'),
    'Strongrrl should be able to set "theory" to active'
);

SELECT is( status, 'active', 'Status for theory should now be "active"' )
  FROM users WHERE nickname = 'theory';

SELECT is( set_by, 'strongrrl', 'Status for theory should now be set by strongrrl' )
  FROM users WHERE nickname = 'theory';


/*****************************************************************************/
-- Test change_password().
SELECT has_function(    'change_password');
SELECT has_function(    'change_password', ARRAY['label', 'text', 'text']);
SELECT is_definer(      'change_password', ARRAY['label', 'text', 'text']);
SELECT function_returns('change_password', 'boolean');
SELECT function_lang_is('change_password', 'plpgsql');
SELECT volatility_is(   'change_password', 'volatile' );
SELECT ok(
    has_function_privilege(
        'pgxn',
        'change_password(label, text, text)',
        'EXECUTE'
    ),
    'User "pgxn" should have EXECUTE priv on change_passworda()'
);

SELECT ok(
    NOT change_password('nobody', 'foo', 'foobar'),
    'change_password() should return false for nonexistent user'
);

SELECT ok(
    NOT change_password('theory', 'foo', 'foobar'),
    'change_password() should return false for invalid old pass'
);

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should be unchanged'
) FROM users WHERE nickname = 'theory';

SELECT * FROM set_now('2010-08-19 14:01:03.306399+00');

SELECT isnt(updated_at, '2010-08-19 14:01:03.306399+00', 'updated_at should be default')
  FROM users WHERE nickname = 'theory';

SELECT ok(
    change_password('theory', 'wet blanket', 'pgtap rulez'),
    'change_password() should return true for proper args'
);

SELECT is(
    password,
    crypt('pgtap rulez', password),
    'Password should now be changed'
) FROM users WHERE nickname = 'theory';

SELECT is(updated_at, '2010-08-19 14:01:03.306399+00', 'updated_at should have been udpated')
  FROM users WHERE nickname = 'theory';

-- Try a too-short password.
SELECT throws_ok(
    $$ SELECT change_password('theory', 'pgtap rulez', 'foo') $$,
    'P0001',
    'Password must be at least four characters long',
    'Should get exception for a too-short password'
);

-- Try to change an inacative user's password.
UPDATE users SET status = 'inactive' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT change_password('strongrrl', 'wet blanket', 'wahtever'),
    'Should get false from change_password() for inactive user'
);

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should not be changed'
) FROM users WHERE nickname = 'strongrrl';

-- Try to change a deleted user's password.
UPDATE users SET status = 'deleted' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT change_password('strongrrl', 'wet blanket', 'wahtever'),
    'Should get false from change_password() for deleted user'
);

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should not be changed'
) FROM users WHERE nickname = 'strongrrl';

-- Try to change a new user's password.
UPDATE users SET status = 'new' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT change_password('strongrrl', 'wet blanket', 'wahtever'),
    'Should get false from change_password() for new user'
);

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should not be changed'
) FROM users WHERE nickname = 'strongrrl';

/*****************************************************************************/
-- Test update_user().
SELECT has_function(    'update_user');
SELECT has_function(    'update_user', ARRAY['label', 'text', 'email', 'uri', 'citext']);
SELECT is_definer(      'update_user', ARRAY['label', 'text', 'email', 'uri', 'citext']);
SELECT function_returns('update_user', 'boolean');
SELECT function_lang_is('update_user', 'plpgsql');
SELECT volatility_is(   'update_user', 'volatile' );
SELECT ok(
    has_function_privilege(
        'pgxn',
        'update_user(label, text, email, uri, citext)',
        'EXECUTE'
    ),
    'User "pgxn" should have EXECUTE priv on update_user()'
);

SELECT ok(
    NOT update_user('foo', NULL),
    'update_user() should return false for non-existent user'
);

-- Update now().
SELECT * FROM set_now('2010-08-20 14:01:03.306399+00');

SELECT ok(
    update_user(
        nickname  := 'theory',
        full_name := 'David E. Wheeler',
        email     := 'david@pgxn.org',
        uri       := 'https://justatheory.com/',
        twitter   := '@theory'
    ), 'Should get true value for updating a user'
);

SELECT is(
    ARRAY[full_name, email, uri, twitter],
    ARRAY['David E. Wheeler', 'david@pgxn.org', 'https://justatheory.com/', 'theory'],
    'User should be updated'
) FROM users WHERE nickname = 'theory';

SELECT is(updated_at, '2010-08-20 14:01:03.306399+00', 'updated_at should have been udpated, too')
  FROM users WHERE nickname = 'theory';

-- Try updating less and less.
SELECT ok(
    update_user(
        nickname := 'theory',
        email    := 'theory@pgxn.org',
        uri      := 'https://www.justatheory.com/'
    ), 'Should get true value for updating a user again'
);

SELECT is(
    ARRAY[full_name, email, uri],
    ARRAY['David E. Wheeler', 'theory@pgxn.org', 'https://www.justatheory.com/'],
    'Only specified columns should be updated'
) FROM users WHERE nickname = 'theory';

SELECT ok(
    update_user('theory', uri := 'https://justatheory.com/'),
    'Should get true value for updating just URI'
);

SELECT is(
    ARRAY[full_name, email, uri],
    ARRAY['David E. Wheeler', 'theory@pgxn.org', 'https://justatheory.com/'],
    'Only URI should be updated'
) FROM users WHERE nickname = 'theory';

SELECT ok(
    update_user('theory', uri := 'https://justatheory.com/'),
    'Should get true value for updating just URI'
);

SELECT ok(
    update_user('theory', ''),
    'Should get true value for updating nothing'
);

SELECT ok(
    update_user('theory', NULL),
    'Should get true value for updating NULL'
);

-- Try to update an inacative user.
UPDATE users SET status = 'inactive' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT update_user('strongrrl', uri := 'http://strongrrl.com'),
    'Should get false from udpate_user() for inactive user'
);

SELECT is( uri, 'http://www.strongrrl.com/', 'Inactive user should not be modified')
  FROM users WHERE nickname = 'strongrrl';

-- Try to update an inacative user.
UPDATE users SET status = 'deleted' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT update_user('strongrrl', uri := 'http://strongrrl.com'),
    'Should get false from udpate_user() for deleted user'
);

SELECT is( uri, 'http://www.strongrrl.com/', 'Deleted user should not be modified')
  FROM users WHERE nickname = 'strongrrl';

-- Try to update an inacative user.
UPDATE users SET status = 'new' WHERE nickname = 'strongrrl';
SELECT ok(
    NOT update_user('strongrrl', uri := 'http://strongrrl.com'),
    'Should get false from udpate_user() for new user'
);

SELECT is( uri, 'http://www.strongrrl.com/', 'New user should not be modified')
  FROM users WHERE nickname = 'strongrrl';

/*****************************************************************************/
-- Test log_visit().
SELECT has_function(    'log_visit');
SELECT has_function(    'log_visit', ARRAY['label']);
SELECT is_definer(      'log_visit', ARRAY['label']);
SELECT function_returns('log_visit', 'boolean');
SELECT function_lang_is('log_visit', 'plpgsql');
SELECT volatility_is(   'log_visit', 'volatile' );
SELECT ok(
    has_function_privilege(
        'pgxn',
        'log_visit(label)',
        'EXECUTE'
    ),
    'User "pgxn" should have EXECUTE priv on log_visit()'
);

-- Make sure defaults are correct.
UPDATE users SET updated_at = pg_catalog.now() WHERE nickname IN ('theory', 'strongrrl');
SELECT is( created_at, pg_catalog.now(), 'created_at should be now()') FROM users;
SELECT is( updated_at, pg_catalog.now(), 'updated_at should be now()') FROM users;
SELECT is( visited_at, pg_catalog.now(), 'visited_at should be now()') FROM users;

-- Log a visit.
SELECT ok( NOT log_visit('foo'), 'log_visit should return false for non-user');
SELECT ok( log_visit('theory'), 'But should return true for real user' );

SELECT is( created_at, pg_catalog.now(), 'created_at should not be updated') FROM users;
SELECT is( updated_at, pg_catalog.now(), 'updated_at should not be updated') FROM users;
SELECT is( visited_at, mock.now(), 'visited_at should be updated for user "theory"')
  FROM users where nickname = 'theory';
SELECT is( visited_at, pg_catalog.now(), 'visited_at should not updated for user "strongrrl"')
  FROM users where nickname = 'strongrrl';

-- Try to log a visit from an inactive user.
UPDATE users SET status = 'inactive' WHERE nickname = 'strongrrl';
SELECT ok( log_visit('strongrrl'), 'Should be able to log visit for inactive user');
SELECT is( visited_at, mock.now(), 'visited_at should be updated for inactive user')
  FROM users where nickname = 'strongrrl';

-- Try to log a visit from a deleted user.
UPDATE users SET status = 'deleted', updated_at = pg_catalog.now() WHERE nickname = 'strongrrl';
SELECT ok( log_visit('strongrrl'), 'Should be able to log visit for deleted user');
SELECT is( visited_at, mock.now(), 'visited_at should be updated for deleted user')
  FROM users where nickname = 'strongrrl';

-- Try to log a visit from a new user.
UPDATE users SET status = 'new', updated_at = pg_catalog.now() WHERE nickname = 'strongrrl';
SELECT ok( log_visit('strongrrl'), 'Should be able to log visit for new user');
SELECT is( visited_at, mock.now(), 'visited_at should be updated for new user')
  FROM users where nickname = 'strongrrl';

/*****************************************************************************/
-- Test set_user_admin().
SELECT throws_ok(
    $$ SELECT set_user_admin( 'nobody', 'nobody', false ) $$,
    'P0001',
    'Permission denied: User “nobody” is not an administrator',
    'Should get an error from set_user_admin() for non-existent setter'
);

SELECT throws_ok(
    $$ SELECT set_user_admin( 'anna', 'nobody', false ) $$,
    'P0001',
    'Permission denied: User “anna” is not an administrator',
    'Should get an error from set_user_admin() for non-admin setter'
);

SELECT ok(
    NOT set_user_admin('theory', 'nobody', false ),
    'Should get false from set_user_admin for non-existent user'
);

SELECT ok(
    NOT set_user_admin('theory', 'nobody', false ),
    'Should get false from set_user_admin for non-existent user'
);


UPDATE users SET updated_at = pg_catalog.now() WHERE nickname IN ('theory', 'strongrrl');
SELECT * FROM set_now('2010-08-21 22:01:03.306399+00');

SELECT ok(is_admin, nickname || ' should be an admin')
  FROM users WHERE nickname IN ('theory', 'strongrrl');

SELECT ok(
    set_user_admin('theory', 'strongrrl', false),
    'Set strongrrl to non-admin'
);

SELECT ok( NOT is_admin, 'Strongrrl should no longer be an admin')
  FROM users WHERE nickname = 'strongrrl';
SELECT is( updated_at, mock.now(), '... and updated_at should be updated')
  FROM users WHERE nickname = 'strongrrl';

SELECT ok( is_admin, 'theory should still be an admin')
  FROM users WHERE nickname = 'theory';
SELECT is( updated_at, pg_catalog.now(), '... and updated_at should not be updated')
  FROM users WHERE nickname = 'theory';

-- Try setting strongrrl to false again.
SELECT ok(
    NOT set_user_admin('theory', 'strongrrl', false),
    'Setting strongrrl to non-admin again should fail'
);
SELECT ok( NOT is_admin, 'Strongrrl should still not be an admin')
  FROM users WHERE nickname = 'strongrrl';
SELECT is( updated_at, mock.now(), '... and updated_at should be unchanged')
  FROM users WHERE nickname = 'strongrrl';

-- Test authenticate_user().
SELECT has_function(    'authenticate_user' );
SELECT has_function(    'authenticate_user', ARRAY['citext', 'text'] );
SELECT is_definer(      'authenticate_user', ARRAY['citext', 'text'] );
SELECT function_returns('authenticate_user', 'boolean' );
SELECT function_lang_is('authenticate_user', 'plpgsql' );
SELECT volatility_is(   'authenticate_user', 'volatile' );
SELECT ok(
    has_function_privilege(
        'pgxn',
        'authenticate_user(citext, text)',
        'EXECUTE'
    ),
    'User "pgxn" should have EXECUTE priv on authenticate_user()'
);

-- Try a non-existent user.
SELECT ok(
    NOT authenticate_user('foo', '***'),
    'authenticate(non-user) should return false'
);

SELECT is(
    visited_at,
    '2010-08-20 14:01:03.306399+00',
    'Check user visted_at'
) FROM users WHERE nickname = 'theory';

-- Try valid user.
SELECT ok(
    authenticate_user('theory', 'pgtap rulez'),
    'authenticate(user, pass) should return true'
);

SELECT is(
    visited_at,
    '2010-08-21 22:01:03.306399+00',
    'User visted_at should be updated'
) FROM users WHERE nickname = 'theory';

SELECT * FROM set_now('2010-08-23 11:01:03.306399+00');

-- Invalid password.
SELECT ok(
    NOT authenticate_user('theory', 'whatevs'),
    'authenticate(user, invald pass) should return false'
);

SELECT is(
    visited_at,
    '2010-08-21 22:01:03.306399+00',
    'User visted_at should not be updated'
) FROM users WHERE nickname = 'theory';

-- Try inactive user.
SELECT ok(
    NOT authenticate_user('strongrrl', 'wet blanket'),
    'authenticate(new user, pass) should return false'
);

SELECT isnt(
    visited_at,
    '2010-08-23 11:01:03.306399+00',
    'Strongrrl visted_at should not be updated'
) FROM users WHERE nickname = 'strongrrl';

-- Activate her.
UPDATE users SET status = 'active' WHERE nickname = 'strongrrl';
SELECT ok(
    authenticate_user('strongrrl', 'wet blanket'),
    'authenticate(active user, pass) should return true'
);

SELECT is(
    visited_at,
    '2010-08-23 11:01:03.306399+00',
    'Strongrrl visted_at should now be updated'
) FROM users WHERE nickname = 'strongrrl';

-- Try a password using an older algorithm.
UPDATE users SET password = crypt('winter is coming', gen_salt('des'));
SELECT ok(
    authenticate_user('strongrrl', 'winter is coming'),
    'authenticate(user, pass) should return true for old hash'
);

/*****************************************************************************/
-- Try with limited permission role.
SET ROLE pgxn;

SELECT ok(
    insert_user(
        nickname  := 'anna',
        password  := 'blue sea',
        full_name := 'Anna Wheeler',
        email     := 'anna@pgxn.org'
    ), 'Insert user "anna" a from pgxn role'
);

SELECT ok(
    set_user_status('theory', 'anna', 'active'),
    'Activate anna'
);

SELECT is(
    password,
    crypt('blue sea', password),
    'User created by pgxn should exist'
) FROM users WHERE nickname = 'anna';

SELECT ok(
    change_password('anna', 'blue sea', 'red sky'),
    'Change password as pgxn'
);

SELECT is(
    password,
    crypt('red sky', password),
    'Password updated by pgxn should be correct'
) FROM users WHERE nickname = 'anna';


SELECT throws_ok(
    $$ INSERT INTO users VALUES ('foo', 'bar') $$,
    42501, -- permission denied
    NULL,
    'User "pgxn" cannot insert into the users table'
);

SELECT throws_ok(
    $$ UPDATE users SET password = 'foo' $$,
    42501, -- permission denied
    NULL,
    'User "pgxn" cannot update the users table'
);

SELECT throws_ok(
    $$ DELETE FROM users WHERE nickname = 'anna' $$,
    42501, -- permission denied,
    NULL,
    'User "pgxn" cannot delete from the users table'
);

SELECT * FROM finish();
ROLLBACK;
