BEGIN;
SELECT plan(123);
-- SELECT * FROM no_plan();

-- Check that we have the functions we think we have.
SELECT has_function(f)
  FROM unnest(ARRAY[
      'setup_meta', 'record_ownership', 'add_distribution',
      'get_distribution', 'update_distribution'
  ]) AS f;

SELECT has_function('setup_meta', ARRAY['label', 'text', 'text']);
SELECT has_function('record_ownership', ARRAY['label', 'text[]']);
SELECT has_function('add_distribution', ARRAY['label', 'text', 'text']);
SELECT has_function('get_distribution', ARRAY['term', 'semver']);
SELECT has_function('update_distribution', ARRAY['label', 'text', 'text']);

-- User "pgxn" should not have access to private fnctions.
SELECT ok(
    NOT has_function_privilege('pgxn', f, 'EXECUTE'),
    'User "pgxn" should not have EXECUTE priv on ' || f
) FROM unnest(ARRAY[
    'setup_meta(label, text, text)',
    'record_ownership(label, text[])'
]) AS f;

-- User "pgxn" has access to *_distribution().
SELECT ok(
    has_function_privilege('pgxn', f, 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on ' || f
) FROM unnest(ARRAY[
      'add_distribution(label, text, text)',
      'get_distribution(term, semver)',
      'update_distribution(label, text, text)'
  ]) AS f;
  
/*****************************************************************************/
-- Mock NOW().
CREATE SCHEMA mock;

CREATE TEMPORARY TABLE ts (ts timestamptz);
INSERT INTO ts VALUES ( pg_catalog.now() );

-- Won't be used by table defaults, which seem to be linked to
-- pg_catalog.now() at creation time.
CREATE FUNCTION mock.now() RETURNS timestamptz LANGUAGE SQL AS 'SELECT ts FROM ts';

DO LANGUAGE plpgsql $$
BEGIN
    EXECUTE 'SET search_path = mock,' || current_setting('search_path') || ',pg_catalog';
END;
$$;

/****************************************************************************/
-- Test setup_meta().
SELECT function_returns('setup_meta', ARRAY['label', 'text', 'text'], 'record' );
SELECT function_lang_is('setup_meta', ARRAY['label', 'text', 'text'], 'plperl' );
SELECT volatility_is(   'setup_meta', ARRAY['label', 'text', 'text'], 'immutable' );

-- Validate that missing required fields throw an exception.
SELECT throws_like(
    $$ SELECT setup_meta('nobody', 'pshaw', '{"foo": "whatever"}') $$,
    '%Required field /name: missing [Spec v1.0.0]%',
    'Should get error from setup_meta for missing name'
);

SELECT throws_like(
    $$ SELECT setup_meta('nobody', 'pshaw', '{"name": "pair"}') $$,
    '%Required field /version: missing [Spec v1.0.0]%',
    'Should get error from setup_meta for missing version'
);

SELECT throws_like(
    $$ SELECT setup_meta('nobody', 'pshaw', '{"name": "pair", "version": "0.0.1"}') $$,
    '%Required field /license: missing [Spec v1.0.0]%',
    'Should get error from setup_meta for missing license'
);

SELECT throws_like(
    $$ SELECT setup_meta('nobody', 'pshaw', '{"name": "pair", "version": "0.0.1", "license": "postgresql"}') $$,
    '%Required field /maintainer: missing [Spec v1.0.0]%',
    'Should get error from setup_meta for missing maintainer'
);

SELECT throws_like(
    $$ SELECT setup_meta('nobody', 'pshaw', '{"name": "pair", "version": "0.0.1", "license": "postgresql", "maintainer": "theory"}') $$,
    '%Required field /abstract: missing [Spec v1.0.0]%',
    'Should get error from setup_meta for missing abstract'
);

-- Pass everything.
SELECT results_eq(
    $$ SELECT * FROM setup_meta('nobody', 'pshaw', '{
        "name": "pair",
        "version": "0.0.1",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "description": "An ordered pair for PostgreSQL",
        "tags": ["foo", "bar", "baz"],
        "prereqs": {
          "runtime": {
            "requires": {
              "PostgreSQL": "8.0.0",
              "PostGIS": "1.5.0"
            },
            "recommends": {
              "PostgreSQL": "8.4.0"
            }
          }
        },
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.2.2" },
            "trip": { "file": "trip.sql.in", "version": "0.2.1" }
        },
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "release_status": "testing",
        "resources": {
          "homepage": "https://pgxn.org/dist/pair/"
        }
    }') $$,
    $$ VALUES('pair'::term, '0.0.1'::semver, 'testing'::relstatus, 'Ordered pair',
    'An ordered pair for PostgreSQL',
    ARRAY[['pair', '0.2.2', ''], ['trip', '0.2.1', '']],
    ARRAY['foo'::citext, 'bar', 'baz'], '{
   "name": "pair",
   "abstract": "Ordered pair",
   "description": "An ordered pair for PostgreSQL",
   "version": "0.0.1",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "nobody",
   "sha1": "pshaw",
   "license": "postgresql",
   "prereqs": {
      "runtime": {
         "recommends": {
            "PostgreSQL": "8.4.0"
         },
         "requires": {
            "PostGIS": "1.5.0",
            "PostgreSQL": "8.0.0"
         }
      }
   },
   "provides": {
      "pair": {
         "file": "pair.sql.in",
         "version": "0.2.2"
      },
      "trip": {
         "file": "trip.sql.in",
         "version": "0.2.1"
      }
   },
   "tags": ["foo", "bar", "baz"],
   "resources": {
      "homepage": "https://pgxn.org/dist/pair/"
   }
}
') $$,
    'Should get expected record from setup_meta()'
);

-- Make sure that the "relstatus" and "tags" columns get defaults.
SELECT results_eq(
    $$ SELECT relstatus, tags
         FROM setup_meta('nobody', 'pshaw', '{
        "name": "pair",
        "version": "0.0.1",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "pair": { "version": "0.0.1", "abstract": "whatever", "file": "pair.sql" }}
    }') $$,
    $$ VALUES ('stable'::relstatus, '{}'::citext[]) $$,
    'Should get expected default release_status and tags from setup_meta()'
);

/****************************************************************************/
-- Test record_ownership().
SELECT function_returns('record_ownership', ARRAY['label', 'text[]'], 'boolean' );
SELECT function_lang_is('record_ownership', ARRAY['label', 'text[]'], 'plpgsql' );
SELECT volatility_is(   'record_ownership', ARRAY['label', 'text[]'], 'volatile' );

SELECT throws_ok(
    $$ SELECT record_ownership('nobody', ARRAY['foo']) $$,
    '23503', -- FK constraint violation 
    NULL,
    'Should get exception from record_ownership() for non-existent user'
);

-- We need a user.
SELECT ok(
    insert_user('theory', 'wet blanket', email := 'theory@pgxn.org'),
    'Insert user "theory"'
);

-- Make sure we have no extensions.
SELECT is(COUNT(*)::int, 0, 'Should start with no extensions') FROM extensions;

-- Create some extensions for this user.
SELECT ok(
    record_ownership('theory', ARRAY['pair']),
    'Create ownership of "pair" for theory'
);

SELECT is(COUNT(*)::int, 1, 'Should now have one extension') FROM extensions;

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'It should be the expected extension'
);

SELECT is(COUNT(*)::int, 0, 'Should have no co-owners') FROM coowners;

-- Now check for the same extension for the same user.
SELECT ok(
    record_ownership('theory', ARRAY['pair']),
    'Theory should still own "pair"'
);

SELECT is(COUNT(*)::int, 1, 'Should still have one extension') FROM extensions;
SELECT is(COUNT(*)::int, 0, 'Should still have no co-owners') FROM coowners;

-- Create another user to mess with.
SELECT ok(
    insert_user('strongrrl', 'wet blanket', email := 'strongrrl@pgxn.org', full_name := 'Julie Wheeler'),
    'Insert user "strongrrl"'
);

SELECT ok(
    NOT record_ownership('strongrrl', ARRAY['pair']),
    'Strongrrl should not own "pair"'
);

SELECT is(COUNT(*)::int, 1, 'Should still have one extension') FROM extensions;
SELECT is(COUNT(*)::int, 0, 'Should still have no co-owners') FROM coowners;

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'Theory should still own it'
);

-- Grant strongrrl co-ownership.
INSERT INTO coowners (extension, nickname) VALUES ('pair', 'strongrrl');

SELECT ok(
    record_ownership('strongrrl', ARRAY['pair']),
    'Strongrrl should now have co-ownership of "pair"'
);

SELECT is(COUNT(*)::int, 1, 'Should still have one extension') FROM extensions;
SELECT is(COUNT(*)::int, 1, 'Should have one co-owner') FROM coowners;

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'Theory should still own it'
);

-- Now have strongrrl register two.
SELECT ok(
    record_ownership('strongrrl', ARRAY['pair', 'triple']),
    'Strongrrl should own "pair" and "triple"'
);

SELECT is(COUNT(*)::int, 2, 'Should now have two extensions') FROM extensions;
SELECT is(COUNT(*)::int, 1, 'Should still have one co-owner') FROM coowners;

SELECT row_eq(
    $$ SELECT * FROM extensions WHERE owner = 'strongrrl' $$,
    ROW('triple', 'strongrrl', NOW(), NOW())::extensions,
    'Strongrrl should now own "triple"'
);

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'But theory should still own "pair"'
);

-- Have theory upload pair and triple.
SELECT ok(
    NOT record_ownership('theory', ARRAY['pair', 'triple']),
    'Theory should not own both "pair" and "triple"'
);

SELECT is(COUNT(*)::int, 2, 'Should still have two extensions') FROM extensions;
SELECT is(COUNT(*)::int, 1, 'Should still have one co-owner') FROM coowners;

SELECT row_eq(
    $$ SELECT * FROM extensions WHERE owner = 'strongrrl' $$,
    ROW('triple', 'strongrrl', NOW(), NOW())::extensions,
    'Strongrrl should still own "triple"'
);

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'And theory should still own "pair"'
);

-- Give theory co-ownership.
INSERT INTO coowners (extension, nickname) VALUES ('triple', 'theory');
SELECT ok(
    record_ownership('theory', ARRAY['pair', 'triple']),
    'Theory should now have ownership of both "pair" and "triple"'
);

SELECT is(COUNT(*)::int, 2, 'Should still have two extensions') FROM extensions;
SELECT is(COUNT(*)::int, 2, 'Should now have two co-owners') FROM coowners;

SELECT row_eq(
    $$ SELECT * FROM extensions WHERE owner = 'strongrrl' $$,
    ROW('triple', 'strongrrl', NOW(), NOW())::extensions,
    'Strongrrl should still own "triple"'
);

SELECT row_eq(
    $$ SELECT * FROM extensions $$,
    ROW('pair', 'theory', NOW(), NOW())::extensions,
    'And theory should still own "pair"'
);

-- Have theory record to other extensions.
SELECT ok(
    record_ownership('theory', ARRAY['foo', 'bar']),
    'Have theory own "foo" and "bar"'
);

SELECT is(COUNT(*)::int, 4, 'Should now have four extensions') FROM extensions;
SELECT is(COUNT(*)::int, 2, 'Should still have two co-owners') FROM coowners;

SELECT is(
    ARRAY(SELECT name::text FROM extensions WHERE owner = 'theory' ORDER BY name),
    ARRAY['bar', 'foo', 'pair'],
    'Theory should have ownership of three extensions'
);

/****************************************************************************/
-- Test add_distribution().
SELECT function_returns('add_distribution', ARRAY['label', 'text', 'text'], 'setof record' );
SELECT function_lang_is('add_distribution', ARRAY['label', 'text', 'text'], 'plpgsql' );
SELECT volatility_is(   'add_distribution', ARRAY['label', 'text', 'text'], 'volatile' );
SELECT is_strict(       'add_distribution', ARRAY['label', 'text', 'text'] );

SELECT throws_ok(
    $_$ SELECT add_distribution('nobody', 'pshaw', $${
        "name":        "pair",
        "version":     "0.0.1",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "pair": { "version": "0.0.1", "abstract": "whatever", "file": "pair.sql" }}
    }$$) $_$,
    'P0001',
    'User “nobody” does not own all provided extensions',
    'Should get an exception for non-existent user'
);

DELETE FROM coowners;

SELECT throws_ok(
    $_$ SELECT add_distribution('theory', 'pshaw', $${
        "name":        "triple",
        "version":     "0.0.1",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "triple": { "version": "0.0.1", "abstract": "whatever", "file": "pair.sql" } }
    }$$) $_$,
    'P0001',
    'User “theory” does not own all provided extensions',
    'Should get an exception for user without permission'
);

SELECT throws_like(
    $_$ SELECT add_distribution('theory', 'pshaw', $${
        "name":        "pair",
        "version":     "",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever"
    }$$) $_$,
    '%Field /version: "" is not a valid semantic version [Spec v1.0.0]%',
    'Should get an exception for blank version string'
);

SELECT throws_like(
    $_$ SELECT add_distribution('theory', 'pshaw', $${
        "name":        "pair",
        "version":     "2.2.2",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "" }
        }
    }$$) $_$,
    '%Field /provides/pair/version: "" is not a valid semantic version [Spec v1.0.0]%',
    'Should get an exception for blank "provides" version string'
);

DELETE FROM extensions;
-- Add a distribution.
SELECT bag_eq(
    $$ SELECT * FROM add_distribution('theory', 'pshaw', '{
        "name": "Pair",
        "version": "0.0.1",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "description": "An ordered pair for PostgreSQL",
        "tags": ["foo", "bar", "baz"],
        "prereqs": {
          "runtime": {
            "requires": {
              "PostgreSQL": "8.0.0",
              "PostGIS": "1.5.0"
            },
            "recommends": {
              "PostgreSQL": "8.4.0"
            }
          }
        },
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.2.2" },
            "Trip": { "file": "trip.sql.in", "version": "0.2.1", "abstract": "A triplet" }
        },
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "release_status": "testing",
        "resources": {
          "homepage": "https://pgxn.org/dist/pair/"
        }
    }')$$,
    $$ VALUES ('meta', 'pair', '{
   "name": "Pair",
   "abstract": "Ordered pair",
   "description": "An ordered pair for PostgreSQL",
   "version": "0.0.1",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "theory",
   "sha1": "pshaw",
   "license": "postgresql",
   "prereqs": {
      "runtime": {
         "recommends": {
            "PostgreSQL": "8.4.0"
         },
         "requires": {
            "PostGIS": "1.5.0",
            "PostgreSQL": "8.0.0"
         }
      }
   },
   "provides": {
      "Trip": {
         "abstract": "A triplet",
         "file": "trip.sql.in",
         "version": "0.2.1"
      },
      "pair": {
         "file": "pair.sql.in",
         "version": "0.2.2"
      }
   },
   "tags": ["foo", "bar", "baz"],
   "resources": {
      "homepage": "https://pgxn.org/dist/pair/"
   }
}
'), ('dist', 'pair', '{
   "name": "Pair",
   "releases": {
      "testing": [
         {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
      ]
   }
}
'), ('extension', 'pair', '{
   "extension": "pair",
   "latest": "testing",
   "testing": { "dist": "Pair", "version": "0.0.1", "sha1": "pshaw" },
   "versions": {
      "0.2.2": [
         { "dist": "Pair", "version": "0.0.1", "status": "testing" }
      ]
   }
}
'), ('extension', 'trip', '{
   "extension": "Trip",
   "latest": "testing",
   "testing": { "dist": "Pair", "version": "0.0.1", "sha1": "pshaw" },
   "versions": {
      "0.2.1": [
         { "dist": "Pair", "version": "0.0.1", "status": "testing" }
      ]
   }
}
'), ('user', 'theory', '{
   "nickname": "theory",
   "name": "",
   "email": "theory@pgxn.org",
   "releases": {
      "Pair": {
         "testing": [
            {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag', 'bar', '{
   "tag": "bar",
   "releases": {
      "Pair": {
         "testing": [
            {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag', 'foo', '{
   "tag": "foo",
   "releases": {
      "Pair": {
         "testing": [
            {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag', 'baz', '{
   "tag": "baz",
   "releases": {
      "Pair": {
         "testing": [
            {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('stats','tag','{
   "count": 3,
   "popular": [
      {"tag": "bar", "dists": 1},
      {"tag": "baz", "dists": 1},
      {"tag": "foo", "dists": 1}
   ]
}
'), ('stats','dist','{
   "count": 1,
   "releases": 1,
   "recent": [
      {
         "dist": "Pair",
         "version": "0.0.1",
         "abstract": "Ordered pair",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','extension','{
   "count": 2,
   "recent": [
      {
         "extension": "pair",
         "abstract": "",
         "ext_version": "0.2.2",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "Trip",
         "abstract": "A triplet",
         "ext_version": "0.2.1",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','user','{
   "count": 2,
   "prolific": [
      {"nickname": "theory", "name": "", "dists": 1, "releases": 1}
   ]
}
'), ('stats','summary','{
    "dists": 1,
    "releases": 1,
    "extensions": 2,
    "users": 2,
    "tags": 3,
    "mirrors": 0
}
')$$, 'Add a distribution for user "theory"');

SELECT is(COUNT(*)::int, 1, 'Should have one distribution') FROM distributions;
SELECT row_eq(
    $$ SELECT name, version, abstract, description, relstatus, creator, sha1, NULL::text, created_at FROM distributions $$,
    ROW('pair', '0.0.1', 'Ordered pair', 'An ordered pair for PostgreSQL', 'testing', 'theory', 'pshaw', NULL, NOW())::distributions,
    'It should look as expected'
);

SELECT is(meta, '{
   "name": "Pair",
   "abstract": "Ordered pair",
   "description": "An ordered pair for PostgreSQL",
   "version": "0.0.1",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "theory",
   "sha1": "pshaw",
   "license": "postgresql",
   "prereqs": {
      "runtime": {
         "recommends": {
            "PostgreSQL": "8.4.0"
         },
         "requires": {
            "PostGIS": "1.5.0",
            "PostgreSQL": "8.0.0"
         }
      }
   },
   "provides": {
      "Trip": {
         "abstract": "A triplet",
         "file": "trip.sql.in",
         "version": "0.2.1"
      },
      "pair": {
         "file": "pair.sql.in",
         "version": "0.2.2"
      }
   },
   "tags": ["foo", "bar", "baz"],
   "resources": {
      "homepage": "https://pgxn.org/dist/pair/"
   }
}
', '...including the metadata')
  FROM distributions
 WHERE name = 'pair' AND version = '0.0.1';

SELECT is(COUNT(*)::int, 2, 'Should now have two extensions') FROM extensions;
SELECT bag_eq(
    $$ SELECT * FROM extensions ORDER BY name $$,
    $$ VALUES
       ('pair', 'theory', NOW(), NOW()),
       ('Trip', 'theory', NOW(), NOW())
    $$,
    'We should have the expected extensions'
);

SELECT is(COUNT(*)::int, 2, 'Should now have two distribution extensions')
  FROM distribution_extensions;
SELECT bag_eq(
    $$ SELECT extension, ext_version, abstract, distribution, dist_version FROM distribution_extensions $$,
    $$ VALUES
       ('pair', '0.2.2'::semver, '',          'Pair', '0.0.1'::semver),
       ('Trip', '0.2.1'::semver, 'A triplet', 'Pair', '0.0.1'::semver)
    $$,
    'We should have the expected distribution extensions'
);

SELECT is(COUNT(*)::int, 3, 'Should now have three distribution tags')
  FROM distribution_tags;
SELECT is(
    ARRAY(
        SELECT tag::text
          FROM distribution_tags
         WHERE distribution = 'pair'
           AND VERSION = '0.0.1' ORDER BY tag
    ),
    ARRAY['bar', 'baz', 'foo'],
    'And they should be the expected tags'
);

SELECT throws_ok(
    $$ SELECT add_distribution('theory', 'foo', '{
        "name":        "pair",
        "version":     "0.0.1",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "pair": { "version": "0.2.2", "abstract": "whatever", "file": "pair.sql" } }
    }') $$,
    'P0001',
    'Distribution “pair 0.0.1” already exists',
    'Should get an exception for a duplicate distribution and version'
);

-- Have strongrrl add a distribution with one extension.
SELECT bag_eq(
    $$ SELECT * FROM add_distribution('strongrrl', 'ick', '{
        "name":        "foo",
        "version":     "0.0.2",
        "license":     "postgresql",
        "maintainer":  "strongrrl",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "foo": { "version": "0.0.2", "abstract": "whatever", "file": "foo.sql" } },
        "tags": ["Foo", "PAIR", "pair"]
    }')$$,
    $$ VALUES('meta', 'foo', '{
   "name": "foo",
   "abstract": "whatever",
   "version": "0.0.2",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "strongrrl",
   "release_status": "stable",
   "user": "strongrrl",
   "sha1": "ick",
   "license": "postgresql",
   "provides": {
      "foo": {
         "abstract": "whatever",
         "file": "foo.sql",
         "version": "0.0.2"
      }
   },
   "tags": ["Foo", "PAIR", "pair"]
}
'), ('dist', 'foo', '{
   "name": "foo",
   "releases": {
      "stable": [
         {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
      ]
   }
}
'), ('extension', 'foo', '{
   "extension": "foo",
   "latest": "stable",
   "stable": { "dist": "foo", "version": "0.0.2", "sha1": "ick" },
   "versions": {
      "0.0.2": [
         { "dist": "foo", "version": "0.0.2" }
      ]
   }
}
'), ('user', 'strongrrl', '{
   "nickname": "strongrrl",
   "name": "Julie Wheeler",
   "email": "strongrrl@pgxn.org",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag', 'foo', '{
   "tag": "Foo",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
         ]
      },
      "Pair": {
         "testing": [
            {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag', 'pair', '{
   "tag": "PAIR",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('stats','tag','{
   "count": 4,
   "popular": [
      {"tag": "foo", "dists": 2},
      {"tag": "bar", "dists": 1},
      {"tag": "baz", "dists": 1},
      {"tag": "pair", "dists": 1}
   ]
}
'), ('stats','user','{
   "count": 2,
   "prolific": [
      {"nickname": "strongrrl", "name": "Julie Wheeler", "dists": 1, "releases": 1},
      {"nickname": "theory", "name": "", "dists": 1, "releases": 1}
   ]
}
'), ('stats','dist','{
   "count": 2,
   "releases": 2,
   "recent": [
      {
         "dist": "foo",
         "version": "0.0.2",
         "abstract": "whatever",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "Pair",
         "version": "0.0.1",
         "abstract": "Ordered pair",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','extension','{
   "count": 3,
   "recent": [
      {
         "extension": "foo",
         "abstract": "whatever",
         "ext_version": "0.0.2",
         "dist": "foo",
         "version": "0.0.2",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "",
         "ext_version": "0.2.2",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "Trip",
         "abstract": "A triplet",
         "ext_version": "0.2.1",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','summary','{
    "dists": 2,
    "releases": 2,
    "extensions": 3,
    "users": 2,
    "tags": 4,
    "mirrors": 0
}
')$$, 'Should get proper JSON for strongrrl upload');

SELECT is(COUNT(*)::int, 2, 'Should now have two distributions') FROM distributions;
SELECT row_eq(
    $$ SELECT name, version, abstract, description, relstatus, creator, sha1, NULL::text, created_at FROM distributions WHERE creator = 'strongrrl' $$,
    ROW('foo', '0.0.2', 'whatever', '', 'stable', 'strongrrl', 'ick', NULL, NOW())::distributions,
    'The new one should look as expected'
);

SELECT is(meta, '{
   "name": "foo",
   "abstract": "whatever",
   "version": "0.0.2",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "strongrrl",
   "release_status": "stable",
   "user": "strongrrl",
   "sha1": "ick",
   "license": "postgresql",
   "provides": {
      "foo": {
         "abstract": "whatever",
         "file": "foo.sql",
         "version": "0.0.2"
      }
   },
   "tags": ["Foo", "PAIR", "pair"]
}
', '...including the metadata')
  FROM distributions
 WHERE name = 'foo' AND version = '0.0.2';

SELECT is(COUNT(*)::int, 3, 'Should now have three extensions') FROM extensions;
SELECT bag_eq(
    $$ SELECT * FROM extensions ORDER BY name $$,
    $$ VALUES
       ('pair', 'theory', NOW(), NOW()),
       ('Trip', 'theory', NOW(), NOW()),
       ('foo', 'strongrrl', NOW(), NOW())
    $$,
    'We should have the expected extensions'
);

SELECT is(COUNT(*)::int, 3, 'Should now have three distribution extensions')
  FROM distribution_extensions;
SELECT bag_eq(
    $$ SELECT extension, ext_version, abstract, distribution, dist_version FROM distribution_extensions $$,
    $$ VALUES
       ('pair', '0.2.2'::semver, '',          'Pair', '0.0.1'::semver),
       ('Trip', '0.2.1'::semver, 'A triplet', 'Pair', '0.0.1'::semver),
       ('foo',  '0.0.2'::semver, 'whatever',  'foo',  '0.0.2'::semver)
    $$,
    'We should have the expected distribution extensions'
);

SELECT is(COUNT(*)::int, 5, 'Should now have five distribution tags')
  FROM distribution_tags;
SELECT is(
    ARRAY(
        SELECT tag::text
          FROM distribution_tags
         WHERE distribution = 'foo'
           AND VERSION = '0.0.2' ORDER BY tag
    ),
    ARRAY['Foo', 'PAIR'],
    'And they should be the expected tags'
);

-- Strongrrl shouldn't be able to upload new pair.
SELECT throws_ok(
    $_$ SELECT add_distribution('strongrrl', 'howdy', $${
        "name":        "pair",
        "version":     "0.0.3",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "pair": { "version": "0.0.3", "abstract": "whatever", "file": "pair.sql" } }

    }$$) $_$,
    'P0001',
    'User “strongrrl” does not own all provided extensions',
    'Should get an exception for non-existent user'
);

-- Give strongrrl co-ownership of pair and try again.
INSERT INTO coowners (extension, nickname) VALUES ('pair', 'strongrrl');

SELECT bag_eq(
    $$ SELECT * FROM add_distribution('strongrrl', 'howdy', '{
        "name":        "pair",
        "version":     "0.0.3",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "tags": ["heavy", "words"],
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": {
           "pair": {
              "abstract": "whatever",
              "file": "pair.sql",
              "version": "0.2.3"
           },
           "wake": {
              "abstract": "da wake",
              "file": "wake.sql",
              "version": "0.0.5"
           }
        }
    }')$$,
    $$ VALUES('meta', 'pair', '{
   "name": "pair",
   "abstract": "whatever",
   "version": "0.0.3",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "stable",
   "user": "strongrrl",
   "sha1": "howdy",
   "license": "postgresql",
   "provides": {
      "pair": {
         "abstract": "whatever",
         "file": "pair.sql",
         "version": "0.2.3"
      },
      "wake": {
         "abstract": "da wake",
         "file": "wake.sql",
         "version": "0.0.5"
      }
   },
   "tags": ["heavy", "words"]
}
'), ('dist', 'pair', '{
   "name": "pair",
   "releases": {
      "stable": [
         {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
      ],
      "testing": [
         {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
      ]
   }
}
'), ('extension', 'pair', '{
   "extension": "pair",
   "latest": "stable",
   "stable": { "dist": "pair", "version": "0.0.3", "sha1": "howdy" },
   "testing": { "dist": "Pair", "version": "0.0.1", "sha1": "pshaw" },
   "versions": {
      "0.2.3": [
         { "dist": "pair", "version": "0.0.3" }
      ],
      "0.2.2": [
         { "dist": "Pair", "version": "0.0.1", "status": "testing" }
      ]
   }
}
'), ('extension','wake','{
   "extension": "wake",
   "latest": "stable",
   "stable": { "dist": "pair", "version": "0.0.3", "sha1": "howdy" },
   "versions": {
      "0.0.5": [
         { "dist": "pair", "version": "0.0.3" }
      ]
   }
}
'), ('user', 'strongrrl', '{
   "nickname": "strongrrl",
   "name": "Julie Wheeler",
   "email": "strongrrl@pgxn.org",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
         ]
      },
      "pair": {
         "stable": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag','heavy','{
   "tag": "heavy",
   "releases": {
      "pair": {
         "stable": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag','words','{
   "tag": "words",
   "releases": {
      "pair": {
         "stable": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('stats','tag','{
   "count": 6,
   "popular": [
      {"tag": "foo", "dists": 2},
      {"tag": "bar", "dists": 1},
      {"tag": "baz", "dists": 1},
      {"tag": "heavy", "dists": 1},
      {"tag": "pair", "dists": 1},
      {"tag": "words", "dists": 1}
   ]
}
'), ('stats','dist','{
   "count": 2,
   "releases": 3,
   "recent": [
      {
         "dist": "foo",
         "version": "0.0.2",
         "abstract": "whatever",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "pair",
         "version": "0.0.3",
         "abstract": "whatever",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "Pair",
         "version": "0.0.1",
         "abstract": "Ordered pair",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','user','{
   "count": 2,
   "prolific": [
      {"nickname": "strongrrl", "name": "Julie Wheeler", "dists": 2, "releases": 2},
      {"nickname": "theory", "name": "", "dists": 1, "releases": 1}
   ]
}
'), ('stats','extension','{
   "count": 4,
   "recent": [
      {
         "extension": "foo",
         "abstract": "whatever",
         "ext_version": "0.0.2",
         "dist": "foo",
         "version": "0.0.2",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "whatever",
         "ext_version": "0.2.3",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "",
         "ext_version": "0.2.2",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "Trip",
         "abstract": "A triplet",
         "ext_version": "0.2.1",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "wake",
         "abstract": "da wake",
         "ext_version": "0.0.5",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      }
   ]
}
'), ('stats','summary','{
    "dists": 2,
    "releases": 3,
    "extensions": 4,
    "users": 2,
    "tags": 6,
    "mirrors": 0
}
')$$, 'Should get proper JSON for strongrrl pair upload');

SELECT is(COUNT(*)::int, 3, 'Should now have three distributions') FROM distributions;
SELECT row_eq(
    $$ SELECT name, version, abstract, description, relstatus, creator, sha1, NULL::text, created_at FROM distributions WHERE creator = 'strongrrl' AND name = 'pair' $$,
    ROW('pair', '0.0.3', 'whatever', '', 'stable', 'strongrrl', 'howdy', NULL, NOW())::distributions,
    'The new one for strongrrl pair should look as expected'
);

SELECT is(meta, '{
   "name": "pair",
   "abstract": "whatever",
   "version": "0.0.3",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "stable",
   "user": "strongrrl",
   "sha1": "howdy",
   "license": "postgresql",
   "provides": {
      "pair": {
         "abstract": "whatever",
         "file": "pair.sql",
         "version": "0.2.3"
      },
      "wake": {
         "abstract": "da wake",
         "file": "wake.sql",
         "version": "0.0.5"
      }
   },
   "tags": ["heavy", "words"]
}
', '...including the metadata')
  FROM distributions
 WHERE name = 'pair' AND version = '0.0.3';

SELECT is(COUNT(*)::int, 4, 'Should now have four extensions') FROM extensions;
SELECT bag_eq(
    $$ SELECT * FROM extensions ORDER BY name $$,
    $$ VALUES
       ('pair', 'theory',    NOW(), NOW()),
       ('Trip', 'theory',    NOW(), NOW()),
       ('foo',  'strongrrl', NOW(), NOW()),
       ('wake', 'strongrrl', NOW(), NOW())
    $$,
    'We should have the expected extensions'
);

SELECT is(COUNT(*)::int, 5, 'Should now have five distribution extensions')
  FROM distribution_extensions;
SELECT bag_eq(
    $$ SELECT * FROM distribution_extensions $$,
    $$ VALUES
       ('pair', '0.2.2'::semver, '',          'Pair', '0.0.1'::semver),
       ('Trip', '0.2.1'::semver, 'A triplet', 'Pair', '0.0.1'::semver),
       ('foo',  '0.0.2'::semver, 'whatever',  'foo',  '0.0.2'::semver),
       ('pair', '0.2.3'::semver, 'whatever',  'pair', '0.0.3'::semver),
       ('wake', '0.0.5'::semver, 'da wake',   'pair', '0.0.3'::semver)
    $$,
    'We should have the expected distribution extensions'
);

SELECT throws_ok(
    $$ SELECT * FROM add_distribution('strongrrl', 'howdy', '{
        "name":        "pair",
        "version":     "0.0.2",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "provides": {
           "pair": {
              "abstract": "whatever",
              "file": "pair.sql",
              "version": "0.2.3"
           }
        },
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        }
    }')$$,
    'P0001',
    'Distribution “pair 0.0.2” version not greater than previous minor release “pair 0.0.3”',
    'Should get error adding lower distribution version'
);

/****************************************************************************/
-- Test update_distribution().
SELECT function_returns('update_distribution', ARRAY['label', 'text', 'text'], 'setof record' );
SELECT function_lang_is('update_distribution', ARRAY['label', 'text', 'text'], 'plpgsql' );
SELECT volatility_is(   'update_distribution', ARRAY['label', 'text', 'text'], 'volatile' );
SELECT is_strict(       'update_distribution', ARRAY['label', 'text', 'text'] );

SELECT throws_ok(
    $_$ SELECT update_distribution('nobody', 'pshaw', $${
        "name":        "pair",
        "version":     "0.0.1",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "pair": { "version": "0.0.1", "abstract": "whatever", "file": "pair.sql" } }

    }$$) $_$,
    'P0001',
    'User “nobody” does not own all provided extensions',
    'Should get an exception from update_distribution() for non-existent user'
);

SELECT throws_ok(
    $_$ SELECT update_distribution('theory', 'pshaw', $${
        "name":        "foo",
        "version":     "0.0.1",
        "license":     "postgresql",
        "maintainer":  "theory",
        "abstract":    "whatever",
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": { "foo": { "version": "0.0.1", "abstract": "whatever", "file": "pair.sql" } }
    }$$) $_$,
    'P0001',
    'User “theory” does not own all provided extensions',
    'Should get an exception from update_distribution() for user without permission'
);

-- Mock the time; the date should *not* be this time.
UPDATE ts SET ts = pg_catalog.now() + '1 day'::interval;

/****************************************************************************/
-- Okay, now re-index Strongrrl's release with different metadata.
SELECT bag_eq(
    $$ SELECT * FROM update_distribution('strongrrl', 'oops', '{
        "name":        "pair",
        "version":     "0.0.3",
        "license":     "mit",
        "maintainer":  "theory",
        "abstract":    "howdy",
        "release_status": "testing",
        "tags": ["wang", "words", "yo"],
        "meta-spec": {
           "version": "1.0.0",
           "url": "https://pgxn.org/meta/spec.txt"
        },
        "provides": {
           "pair": {
              "abstract": "new abstract",
              "file": "pair.sql",
              "version": "0.2.3"
           },
           "wang": {
              "abstract": "the wang",
              "file": "wang.sql",
              "version": "0.0.8"
           }
        }
    }')$$,
    $$ VALUES
        ('dist','pair','{
   "name": "pair",
   "releases": {
      "testing": [
         {"version": "0.0.3", "date": "' || utc_date(pg_catalog.NOW()) || '"},
         {"version": "0.0.1", "date": "' || utc_date(pg_catalog.NOW()) || '"}
      ]
   }
}
'), ('tag','yo','{
   "tag": "yo",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(pg_catalog.NOW()) || '"}
         ]
      }
   }
}
'), ('tag','wang','{
   "tag": "wang",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(pg_catalog.NOW()) || '"}
         ]
      }
   }
}
'), ('tag','words','{
   "tag": "words",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(pg_catalog.NOW()) || '"}
         ]
      }
   }
}
'), ('meta','pair','{
   "name": "pair",
   "abstract": "howdy",
   "version": "0.0.3",
   "date": "' || utc_date(pg_catalog.NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "strongrrl",
   "sha1": "oops",
   "license": "mit",
   "provides": {
      "pair": {
         "abstract": "new abstract",
         "file": "pair.sql",
         "version": "0.2.3"
      },
      "wang": {
         "abstract": "the wang",
         "file": "wang.sql",
         "version": "0.0.8"
      }
   },
   "tags": ["wang", "words", "yo"]
}
'), ('stats','extension','{
   "count": 5,
   "recent": [
      {
         "extension": "foo",
         "abstract": "whatever",
         "ext_version": "0.0.2",
         "dist": "foo",
         "version": "0.0.2",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "new abstract",
         "ext_version": "0.2.3",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "",
         "ext_version": "0.2.2",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "Trip",
         "abstract": "A triplet",
         "ext_version": "0.2.1",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "wang",
         "abstract": "the wang",
         "ext_version": "0.0.8",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      }
   ]
}
'), ('extension','pair','{
   "extension": "pair",
   "latest": "testing",
   "testing": { "dist": "pair", "version": "0.0.3", "sha1": "oops" },
   "versions": {
      "0.2.3": [
         { "dist": "pair", "version": "0.0.3", "status": "testing" }
      ],
      "0.2.2": [
         { "dist": "Pair", "version": "0.0.1", "status": "testing" }
      ]
   }
}
'), ('extension','wang','{
   "extension": "wang",
   "latest": "testing",
   "testing": { "dist": "pair", "version": "0.0.3", "sha1": "oops" },
   "versions": {
      "0.0.8": [
         { "dist": "pair", "version": "0.0.3", "status": "testing" }
      ]
   }
}
'), ('stats','tag','{
   "count": 7,
   "popular": [
      {"tag": "foo", "dists": 2},
      {"tag": "bar", "dists": 1},
      {"tag": "baz", "dists": 1},
      {"tag": "pair", "dists": 1},
      {"tag": "wang", "dists": 1},
      {"tag": "words", "dists": 1},
      {"tag": "yo", "dists": 1}
   ]
}
'), ('stats','dist','{
   "count": 2,
   "releases": 3,
   "recent": [
      {
         "dist": "foo",
         "version": "0.0.2",
         "abstract": "whatever",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "pair",
         "version": "0.0.3",
         "abstract": "howdy",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "Pair",
         "version": "0.0.1",
         "abstract": "Ordered pair",
         "date": "' || utc_date(pg_catalog.NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','user','{
   "count": 2,
   "prolific": [
      {"nickname": "strongrrl", "name": "Julie Wheeler", "dists": 2, "releases": 2},
      {"nickname": "theory", "name": "", "dists": 1, "releases": 1}
   ]
}
'), ('user','strongrrl','{
   "nickname": "strongrrl",
   "name": "Julie Wheeler",
   "email": "strongrrl@pgxn.org",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(pg_catalog.NOW()) || '"}
         ]
      },
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(pg_catalog.NOW()) || '"}
         ]
      }
   }
}
'), ('stats','summary','{
    "dists": 2,
    "releases": 3,
    "extensions": 5,
    "users": 2,
    "tags": 7,
    "mirrors": 0
}
')$$, 'Should get proper JSON for strongrrl pair reindex');

-- So now we should have the updated tags.
SELECT is(
    ARRAY(SELECT (tag::text) FROM distribution_tags WHERE distribution = 'pair' AND version = '0.0.3' ORDER BY tag),
    ARRAY['wang', 'words', 'yo'],
    'Should have udpated tags'
);

-- And the distribution should be updated.
SELECT is(meta, '{
   "name": "pair",
   "abstract": "howdy",
   "version": "0.0.3",
   "date": "' || utc_date(pg_catalog.NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "strongrrl",
   "sha1": "oops",
   "license": "mit",
   "provides": {
      "pair": {
         "abstract": "new abstract",
         "file": "pair.sql",
         "version": "0.2.3"
      },
      "wang": {
         "abstract": "the wang",
         "file": "wang.sql",
         "version": "0.0.8"
      }
   },
   "tags": ["wang", "words", "yo"]
}
', 'The dist metadata should be updated but have original date')
  FROM distributions
 WHERE name = 'pair' AND version = '0.0.3';

-- And the extensions should be updated, too.
SELECT is(ARRAY(
    SELECT (extension || '-' || ext_version::text || ' (' || abstract || ')')
      FROM distribution_extensions
     WHERE distribution = 'pair' AND dist_version = '0.0.3'
     ORDER BY extension),
    ARRAY['pair-0.2.3 (new abstract)', 'wang-0.0.8 (the wang)'],
    'Should have udpated extensions'
);

/****************************************************************************/
-- Now that we have all that data, have a look at distribution_details.
SELECT row_eq(
    $$ SELECT * FROM distribution_details WHERE name = 'pair' AND version = '0.0.1' $$,
    ROW('Pair', '0.0.1', 'Ordered pair', 'An ordered pair for PostgreSQL',
        'testing', 'theory', 'pshaw', '{
   "name": "Pair",
   "abstract": "Ordered pair",
   "description": "An ordered pair for PostgreSQL",
   "version": "0.0.1",
   "date": "' || utc_date(pg_catalog.NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "theory",
   "sha1": "pshaw",
   "license": "postgresql",
   "prereqs": {
      "runtime": {
         "recommends": {
            "PostgreSQL": "8.4.0"
         },
         "requires": {
            "PostGIS": "1.5.0",
            "PostgreSQL": "8.0.0"
         }
      }
   },
   "provides": {
      "Trip": {
         "abstract": "A triplet",
         "file": "trip.sql.in",
         "version": "0.2.1"
      },
      "pair": {
         "file": "pair.sql.in",
         "version": "0.2.2"
      }
   },
   "tags": ["foo", "bar", "baz"],
   "resources": {
      "homepage": "https://pgxn.org/dist/pair/"
   }
}
', ARRAY[['Trip', '0.2.1'],['pair','0.2.2']],
   ARRAY['bar', 'baz', 'foo'])::distribution_details,
   'Should get proper dist details for pair 0.0.1'
);

-- Make sure we get errors for invalid versions.
UPDATE distributions
   SET created_at = pg_catalog.NOW() - '1 day'::interval
 WHERE name = 'Pair'
   AND version = '0.0.1';

UPDATE distributions
   SET created_at = pg_catalog.NOW()
 WHERE name = 'Pair'
   AND version = '0.0.1';

UPDATE distributions
   SET created_at = pg_catalog.NOW() + '1 day'::interval
 WHERE name = 'pair'
   AND version = '0.0.3';

UPDATE distributions
   SET created_at = pg_catalog.NOW()
 WHERE name = 'pair'
   AND version = '0.0.3';

/****************************************************************************/
-- Make sure we get the same data from get_distribution().
UPDATE ts SET ts = pg_catalog.now();
SELECT function_returns('get_distribution', ARRAY['term', 'semver'], 'setof record' );
SELECT function_lang_is('get_distribution', ARRAY['term', 'semver'], 'plpgsql' );
SELECT volatility_is(   'get_distribution', ARRAY['term', 'semver'], 'stable' );
SELECT is_strict(       'get_distribution', ARRAY['term', 'semver'] );

SELECT bag_eq(
    $$ SELECT * FROM get_distribution('pair', '0.0.3')$$,
    $$ VALUES
        ('dist','pair','{
   "name": "pair",
   "releases": {
      "testing": [
         {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"},
         {"version": "0.0.1", "date": "' || utc_date(NOW()) || '"}
      ]
   }
}
'), ('tag','yo','{
   "tag": "yo",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag','wang','{
   "tag": "wang",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('tag','words','{
   "tag": "words",
   "releases": {
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('meta','pair','{
   "name": "pair",
   "abstract": "howdy",
   "version": "0.0.3",
   "date": "' || utc_date(NOW()) || '",
   "maintainer": "theory",
   "release_status": "testing",
   "user": "strongrrl",
   "sha1": "oops",
   "license": "mit",
   "provides": {
      "pair": {
         "abstract": "new abstract",
         "file": "pair.sql",
         "version": "0.2.3"
      },
      "wang": {
         "abstract": "the wang",
         "file": "wang.sql",
         "version": "0.0.8"
      }
   },
   "tags": ["wang", "words", "yo"]
}
'), ('stats','extension','{
   "count": 5,
   "recent": [
      {
         "extension": "foo",
         "abstract": "whatever",
         "ext_version": "0.0.2",
         "dist": "foo",
         "version": "0.0.2",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "new abstract",
         "ext_version": "0.2.3",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "extension": "pair",
         "abstract": "",
         "ext_version": "0.2.2",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "Trip",
         "abstract": "A triplet",
         "ext_version": "0.2.1",
         "dist": "Pair",
         "version": "0.0.1",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      },
      {
         "extension": "wang",
         "abstract": "the wang",
         "ext_version": "0.0.8",
         "dist": "pair",
         "version": "0.0.3",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      }
   ]
}
'), ('extension','pair','{
   "extension": "pair",
   "latest": "testing",
   "testing": { "dist": "pair", "version": "0.0.3", "sha1": "oops" },
   "versions": {
      "0.2.3": [
         { "dist": "pair", "version": "0.0.3", "status": "testing" }
      ],
      "0.2.2": [
         { "dist": "Pair", "version": "0.0.1", "status": "testing" }
      ]
   }
}
'), ('extension','wang','{
   "extension": "wang",
   "latest": "testing",
   "testing": { "dist": "pair", "version": "0.0.3", "sha1": "oops" },
   "versions": {
      "0.0.8": [
         { "dist": "pair", "version": "0.0.3", "status": "testing" }
      ]
   }
}
'), ('stats','tag','{
   "count": 7,
   "popular": [
      {"tag": "foo", "dists": 2},
      {"tag": "bar", "dists": 1},
      {"tag": "baz", "dists": 1},
      {"tag": "pair", "dists": 1},
      {"tag": "wang", "dists": 1},
      {"tag": "words", "dists": 1},
      {"tag": "yo", "dists": 1}
   ]
}
'), ('stats','dist','{
   "count": 2,
   "releases": 3,
   "recent": [
      {
         "dist": "foo",
         "version": "0.0.2",
         "abstract": "whatever",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "pair",
         "version": "0.0.3",
         "abstract": "howdy",
         "date": "' || utc_date(NOW()) || '",
         "user": "strongrrl",
         "user_name": "Julie Wheeler"
      },
      {
         "dist": "Pair",
         "version": "0.0.1",
         "abstract": "Ordered pair",
         "date": "' || utc_date(NOW()) || '",
         "user": "theory",
         "user_name": ""
      }
   ]
}
'), ('stats','user','{
   "count": 2,
   "prolific": [
      {"nickname": "strongrrl", "name": "Julie Wheeler", "dists": 2, "releases": 2},
      {"nickname": "theory", "name": "", "dists": 1, "releases": 1}
   ]
}
'), ('user','strongrrl','{
   "nickname": "strongrrl",
   "name": "Julie Wheeler",
   "email": "strongrrl@pgxn.org",
   "releases": {
      "foo": {
         "stable": [
            {"version": "0.0.2", "date": "' || utc_date(NOW()) || '"}
         ]
      },
      "pair": {
         "testing": [
            {"version": "0.0.3", "date": "' || utc_date(NOW()) || '"}
         ]
      }
   }
}
'), ('stats','summary','{
    "dists": 2,
    "releases": 3,
    "extensions": 5,
    "users": 2,
    "tags": 7,
    "mirrors": 0
}
')$$, 'get_distribution() should return same results as add_distribution did');

SELECT is_empty(
    $$ SELECT * FROM get_distribution('nonexistent', '0.0.3')$$,
    'Should get no result from get_distribution() for non-existent distribution'
);

SELECT is_empty(
    $$ SELECT * FROM get_distribution('pair', '0.99.3')$$,
    'Should get no result from get_distribution() for non-existent version'
);

SELECT * FROM finish();
ROLLBACK;
